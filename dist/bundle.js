(()=>{"use strict";var t,e,o,a,r,n={132:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){this.startingPlayer=0,this.fighter1=t,this.fighter2=e,this.fighters=[this.fighter1,this.fighter2],console.log("%c welcome ".concat(t.tamName," and ").concat(e.tamName," to MORTAL KOMBAT!!!!"),"font-size: 2em; color:red; font-weight:bold; background:black;"),this.initMatch()}return t.prototype.initMatch=function(){console.log("Fight!"),this.startingPlayer=this.determineFirstFighter(),this.meleRound(this.fighters,this.startingPlayer)},t.prototype.determineFirstFighter=function(){return Math.random()>.5?0:1},t.prototype.meleRound=function(t,e){var o=this.determineCombatRoles(e),a=t[o.attacker],r=t[o.defender],n=a.attack(),i=r.defend();if(!0===this.determineStrikeOutcome(n,i)?(console.log("%c".concat(a.getFighterName()," hits ").concat(r.getFighterName()," with ").concat(n.foodName," for ").concat(n.damage,"!"),"font-size: 2em; color: red; background: black;"),r.takeDamage(n.damage)):console.log("%c".concat(a.getFighterName()," misses ").concat(r.getFighterName()," with ").concat(n.foodName,"!"),"font-size: 2em; color:green;background:yellow;"),console.log("".concat(a.getFighterName(),": ").concat(a.getHP()," ").concat(r.getFighterName(),": ").concat(r.getHP())),r.getHP()<=0)console.log("%c".concat(a.getFighterName()," has won!"),"font-size: 3em; color:goldenrod; background:blue; border: 2px solid black;");else{var d;d=0==e?1:0,this.meleRound(t,d)}},t.prototype.determineCombatRoles=function(t){var e=0;return 0==t&&(e=1),{attacker:t,defender:e}},t.prototype.determineStrikeOutcome=function(t,e){var o=.45;return t.foodCat==e.weakAgainst&&(o*=2),t.foodCat==e.strongAgainst&&(o/=2),Math.random()>=o},t}();e.default=o},156:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){this.defenseCharacteristics={strongAgainst:"meat",weakAgainst:"fruit"},this.tamName=t,this.hp=60,console.log("my name is ".concat(this.tamName)),this.foods=[{foodName:"Banana Bazooka",foodCat:"fruit",damage:11},{foodName:"Apple Assault Rifle",foodCat:"fruit",damage:10},{foodName:"Strawberry Stun Gun",foodCat:"fruit",damage:9},{foodName:"Mango Mortar",foodCat:"fruit",damage:6},{foodName:"Grape Gatling Gun",foodCat:"fruit",damage:4},{foodName:"Kiwi Katana",foodCat:"fruit",damage:1},{foodName:"Blueberry Blow Dart",foodCat:"fruit",damage:1},{foodName:"Wheat Whip",foodCat:"grain",damage:9},{foodName:"Rye Rocket",foodCat:"grain",damage:6},{foodName:"Rice Revolver",foodCat:"grain",damage:3}]}return t.prototype.getFighterName=function(){return this.tamName},t.prototype.defend=function(){return this.defenseCharacteristics},t.prototype.attack=function(){return this.foods[Math.floor(Math.random()*this.foods.length)]},t.prototype.takeDamage=function(t){this.hp-=t},t.prototype.getHP=function(){return this.hp},t}();e.default=o},400:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t){this.defenseCharacteristics={strongAgainst:"fruit",weakAgainst:"meat"},this.tamName=t,this.hp=60,console.log("my name is ".concat(this.tamName)),this.foods=[{foodName:"Aggresive Wheat",foodCat:"grain",damage:5},{foodName:"Agitated Niblets",foodCat:"meat",damage:7},{foodName:"Unsettled Apple",foodCat:"fruit",damage:3},{foodName:"Livid Oatmeal",foodCat:"grain",damage:10},{foodName:"Illegal Buckwheat",foodCat:"grain",damage:5},{foodName:"Kid-Friendly Jerky",foodCat:"meat",damage:1},{foodName:"Racially Insensitive Pasta",foodCat:"grain",damage:9},{foodName:"Grandma's Bolognese",foodCat:"meat",damage:5},{foodName:"The Cracker Snatcher",foodCat:"grain",damage:10},{foodName:"Attack Coconut",foodCat:"fruit",damage:5}]}return t.prototype.getFighterName=function(){return this.tamName},t.prototype.defend=function(){return this.defenseCharacteristics},t.prototype.attack=function(){var t=Math.floor(Math.random()*this.foods.length);return this.foods[t]},t.prototype.takeDamage=function(t){this.hp-=t},t.prototype.getHP=function(){return this.hp},t}();e.default=o}},i={};function d(t){var e=i[t];if(void 0!==e)return e.exports;var o=i[t]={exports:{}};return n[t](o,o.exports,d),o.exports}t=d(132),e=d(400),o=d(156),a=new e.default("Grainboy Slim"),r=new o.default("Carlton"),new t.default(a,r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dUJBQXdCTyxRQUFTLFFBQVNOLE9BQVEsSUFDN0QsQ0FBQ0QsU0FBVSxpQkFBa0JPLFFBQVMsUUFBU04sT0FBUSxHQUcvRCxDQTZCSixPQTFCVyxZQUFBRixlQUFQLFdBQ0ksT0FBT3BCLEtBQUtJLE9BQ2hCLEVBR08sWUFBQWMsT0FBUCxXQUNJLE9BQU9sQixLQUFLZ0Msc0JBQ2hCLEVBR08sWUFBQWhCLE9BQVAsV0FDSSxJQUFNc0IsRUFBTTlCLEtBQUsyQixNQUFNM0IsS0FBS0MsU0FBV1QsS0FBS2tDLE1BQU1FLFFBQ2xELE9BQU9wQyxLQUFLa0MsTUFBTUksRUFDdEIsRUFHQSxZQUFBZixXQUFBLFNBQVdELEdBQ1B0QixLQUFLaUMsSUFBTVgsQ0FHZixFQUdPLFlBQUFFLE1BQVAsV0FDRyxPQUFPeEIsS0FBS2lDLEVBQ2YsRUFDSixFQWpFQSxHQW9FQSxVQUFlTSxDLEdDOUVYQyxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFFLFFBR3JCLElBQUlDLEVBQVNOLEVBQXlCRSxHQUFZLENBR2pERyxRQUFTLENBQUMsR0FPWCxPQUhBRSxFQUFvQkwsR0FBVUksRUFBUUEsRUFBT0QsUUFBU0osR0FHL0NLLEVBQU9ELE9BQ2YsQ0pWQSxTQU1BLFNBQ0EsU0FHSWxELEVBQVEsSUFBSSxVQUFhLGlCQUN6QkMsRUFBTyxJQUFJLFVBQVEsV0FDUixJQUFJLFVBQU1ELEVBQU9DLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXN0YXJ0ZXIvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vd2VicGFjay1zdGFydGVyLy4vc3JjL0FyZW5hLnRzIiwid2VicGFjazovL3dlYnBhY2stc3RhcnRlci8uL3NyYy9DYXJsdG9uLnRzIiwid2VicGFjazovL3dlYnBhY2stc3RhcnRlci8uL3NyYy9ncmFpbmJveS50cyIsIndlYnBhY2s6Ly93ZWJwYWNrLXN0YXJ0ZXIvd2VicGFjay9ib290c3RyYXAiXSwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaCc7XG5cbi8qZnVuY3Rpb24gY29tcG9uZW50KCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgLy8gZWxlbWVudC5pbm5lckhUTUwgPSBfLmpvaW4oWydIZWxsbycsICd3ZWJwYWNrJ10sICcgJyk7XG4gICAgICAgIGVsZW1lbnQuaW5uZXJIVE1MID0gYEhlbGxvIFdlYnBhY2shYDtcblxuICAgIHJldHVybiBlbGVtZW50O1xufVxuXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbXBvbmVudCgpKTsqL1xuaW1wb3J0IEFyZW5hIGZyb20gJy4vQXJlbmEnO1xuaW1wb3J0IEZpZ2h0ZXJBIGZyb20gJy4vRmlnaHRlckEnO1xuXG5pbXBvcnQgSnVqdSBmcm9tICcuL0p1anUnO1xuaW1wb3J0IE1pZ2h0eVBvdGF0byBmcm9tICcuL01pZ2h0eVBvdGF0byc7XG5cbmltcG9ydCBHcmFpbmJveVNsaW0gZnJvbSAnLi9ncmFpbmJveSc7XG5pbXBvcnQgQ2FybHRvbiBmcm9tICcuL0Nhcmx0b24nO1xuXG5cbmxldCBncmFpbiA9IG5ldyBHcmFpbmJveVNsaW0oXCJHcmFpbmJveSBTbGltXCIpO1xubGV0IGNhcmwgPSBuZXcgQ2FybHRvbihcIkNhcmx0b25cIik7XG5sZXQgdGhpc1JpbmcgPSBuZXcgQXJlbmEoZ3JhaW4sIGNhcmwpOyIsImltcG9ydCBEaWdpUGV0IGZyb20gJy4vRGlnaVBldCc7XG5pbXBvcnQgRmlnaHRDbHViIGZyb20gJy4vRmlnaHRDbHViJztcbmltcG9ydCBDb21iYXRSb2xlcyBmcm9tICcuL0NvbWJhdFJvbGVzJztcbmltcG9ydCBPZmZlbnNpdmVGb29kIGZyb20gJy4vT2ZmZW5zaXZlRm9vZCc7XG5pbXBvcnQgQXJtb3IgZnJvbSAnLi9Bcm1vcic7XG5cbmNsYXNzIEFyZW5hIGltcGxlbWVudHMgRmlnaHRDbHVie1xuICAgIGZpZ2h0ZXIxOiBEaWdpUGV0O1xuICAgIGZpZ2h0ZXIyOiBEaWdpUGV0O1xuICAgIGZpZ2h0ZXJzOiBEaWdpUGV0W107XG4gICAgc3RhcnRpbmdQbGF5ZXI6IG51bWJlciA9IDA7XG4gICAgY29uc3RydWN0b3IoZmlnaHRlcjE6IERpZ2lQZXQsIGZpZ2h0ZXIyOiBEaWdpUGV0KXtcbiAgICAgICAgdGhpcy5maWdodGVyMSA9IGZpZ2h0ZXIxO1xuICAgICAgICB0aGlzLmZpZ2h0ZXIyID0gZmlnaHRlcjI7XG4gICAgICAgIHRoaXMuZmlnaHRlcnMgPSBbdGhpcy5maWdodGVyMSwgdGhpcy5maWdodGVyMl07XG4gICAgICAgIGNvbnNvbGUubG9nKGAlYyB3ZWxjb21lICR7ZmlnaHRlcjEudGFtTmFtZX0gYW5kICR7ZmlnaHRlcjIudGFtTmFtZX0gdG8gTU9SVEFMIEtPTUJBVCEhISFgLFwiZm9udC1zaXplOiAyZW07IGNvbG9yOnJlZDsgZm9udC13ZWlnaHQ6Ym9sZDsgYmFja2dyb3VuZDpibGFjaztcIik7XG4gICAgICAgIHRoaXMuaW5pdE1hdGNoKCk7XG4gICAgfVxuICAgIC8vaW5pdGlhbGl6ZSB0aGUgbWF0Y2ghXG4gICAgaW5pdE1hdGNoKCk6IHZvaWR7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRmlnaHQhXCIpO1xuICAgICAgICB0aGlzLnN0YXJ0aW5nUGxheWVyID0gIHRoaXMuZGV0ZXJtaW5lRmlyc3RGaWdodGVyKCk7XG4gICAgICAgIHRoaXMubWVsZVJvdW5kKHRoaXMuZmlnaHRlcnMsIHRoaXMuc3RhcnRpbmdQbGF5ZXIpO1xuICAgIH1cbiAgICAvL3JhbmRvbSBmaXJzdCBzdHJpa2VcbiAgICBkZXRlcm1pbmVGaXJzdEZpZ2h0ZXIoKTogbnVtYmVye1xuICAgICAgICBsZXQgZmlyc3RGaWdodGVyOiBudW1iZXI7XG4gICAgICAgIGxldCBmaWdodGVyQ2hhbmNlID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgaWYoZmlnaHRlckNoYW5jZT4uNSl7XG4gICAgICAgICAgICBmaXJzdEZpZ2h0ZXIgPSAwO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGZpcnN0RmlnaHRlciA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpcnN0RmlnaHRlcjtcbiAgICB9XG4gICAgLy9tZWxlUm91bmRzIHJ1biB1bnRpbCBhIHBsYXllciByZWFjaGVzIDAgaGl0IHBvaW50c1xuICAgIG1lbGVSb3VuZChmaWdodGVyczogRGlnaVBldFtdLCBwbGF5ZXJOdW06IG51bWJlcik6IHZvaWR7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJydW4gYSByb3VuZCBvZiBmaWdodGluZyFcIik7XG4gICAgICAgIC8vZGVmaW5lIHdobyB0aGUgYXR0YWNrZXIgaXM6XG4gICAgICAgIGxldCBjb21iYXRhbnRzOiBDb21iYXRSb2xlcyA9IHRoaXMuZGV0ZXJtaW5lQ29tYmF0Um9sZXMocGxheWVyTnVtKTsgXG4gICAgICAgIC8vZGVmaW5lIHRoZSBhdHRhY2tlciBhbmQgZGVmZW5kZXIgcm9sZXM6XG4gICAgICAgIC8vY29uc29sZS5sb2coYGF0dGFja2VyOiAke2NvbWJhdGFudHMuYXR0YWNrZXJ9ICBkZWZlbmRlcjoke2NvbWJhdGFudHMuZGVmZW5kZXJ9YCk7XG4gICAgICAgIGxldCBhdHRhY2tlcjogRGlnaVBldCA9IGZpZ2h0ZXJzW2NvbWJhdGFudHMuYXR0YWNrZXJdIGFzIERpZ2lQZXQ7XG4gICAgICAgIGxldCBkZWZlbmRlcjogRGlnaVBldCA9IGZpZ2h0ZXJzW2NvbWJhdGFudHMuZGVmZW5kZXJdIGFzIERpZ2lQZXQ7XG4gICAgICAgIC8vbm93IHdlIGdldCB0aGUgZm9vZCB0eXBlIHRvIGF0dGFjayB3aXRoXG4gICAgICAgIGxldCBmb29kV2VhcG9uOiBPZmZlbnNpdmVGb29kID0gYXR0YWNrZXIuYXR0YWNrKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coZm9vZFdlYXBvbik7XG4gICAgICAgIC8vd2UgZ2V0IHRoZSBkZWZlbnNlIGZyb20gdGhlIG9wcG9zaW5nIHBsYXllclxuICAgICAgICBsZXQgZGVmZW5zZTogQXJtb3IgPSBkZWZlbmRlci5kZWZlbmQoKTtcbiAgICAgICAgLy9jaGVjayBpZiB0aGUgYXR0YWNrIGhpdFxuICAgICAgICBsZXQgZm9vZEhpdDogYm9vbGVhbiA9IHRoaXMuZGV0ZXJtaW5lU3RyaWtlT3V0Y29tZShmb29kV2VhcG9uLCBkZWZlbnNlKTtcbiAgICAgICAgLy9hcHBseSB0aGUgZGFtYWdlXG4gICAgICAgIGlmKGZvb2RIaXQ9PT10cnVlKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAlYyR7YXR0YWNrZXIuZ2V0RmlnaHRlck5hbWUoKX0gaGl0cyAke2RlZmVuZGVyLmdldEZpZ2h0ZXJOYW1lKCl9IHdpdGggJHtmb29kV2VhcG9uLmZvb2ROYW1lfSBmb3IgJHtmb29kV2VhcG9uLmRhbWFnZX0hYCxcImZvbnQtc2l6ZTogMmVtOyBjb2xvcjogcmVkOyBiYWNrZ3JvdW5kOiBibGFjaztcIik7XG4gICAgICAgICAgICBkZWZlbmRlci50YWtlRGFtYWdlKGZvb2RXZWFwb24uZGFtYWdlKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJWMke2F0dGFja2VyLmdldEZpZ2h0ZXJOYW1lKCl9IG1pc3NlcyAke2RlZmVuZGVyLmdldEZpZ2h0ZXJOYW1lKCl9IHdpdGggJHtmb29kV2VhcG9uLmZvb2ROYW1lfSFgLFwiZm9udC1zaXplOiAyZW07IGNvbG9yOmdyZWVuO2JhY2tncm91bmQ6eWVsbG93O1wiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgJHthdHRhY2tlci5nZXRGaWdodGVyTmFtZSgpfTogJHthdHRhY2tlci5nZXRIUCgpfSAke2RlZmVuZGVyLmdldEZpZ2h0ZXJOYW1lKCl9OiAke2RlZmVuZGVyLmdldEhQKCl9YCk7XG4gICAgICAgIC8vY2hlY2sgZm9yIDAgYW5kIHNob3cgcmVzdWx0XG4gICAgICAgIGlmKGRlZmVuZGVyLmdldEhQKCk8PTApe1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCVjJHthdHRhY2tlci5nZXRGaWdodGVyTmFtZSgpfSBoYXMgd29uIWAsXCJmb250LXNpemU6IDNlbTsgY29sb3I6Z29sZGVucm9kOyBiYWNrZ3JvdW5kOmJsdWU7IGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1wiKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsZXQgbmV4dEF0dGFja2VyOiBudW1iZXI7XG4gICAgICAgICAgICBpZiAocGxheWVyTnVtPT0wKXtcbiAgICAgICAgICAgICAgICBuZXh0QXR0YWNrZXIgPSAxO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgbmV4dEF0dGFja2VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWVsZVJvdW5kKGZpZ2h0ZXJzLCBuZXh0QXR0YWNrZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRldGVybWluZUNvbWJhdFJvbGVzKGFjdGl2ZUF0dGFja2VyOiBudW1iZXIpOiBDb21iYXRSb2xlc3tcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImRldGVybWluZSB0aGUgY29tYmF0IHJvbGVzXCIpO1xuICAgICAgICBsZXQgZGVmZW5kZXI6IG51bWJlciA9IDA7XG4gICAgICAgIGlmKGFjdGl2ZUF0dGFja2VyPT0wKXtcbiAgICAgICAgICAgIGRlZmVuZGVyID0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge2F0dGFja2VyOiBhY3RpdmVBdHRhY2tlciwgZGVmZW5kZXJ9O1xuICAgIH1cbiAgICBkZXRlcm1pbmVTdHJpa2VPdXRjb21lKGZvb2RXZWFwb246IE9mZmVuc2l2ZUZvb2QsIGRlZmVuZDogQXJtb3IpOiBib29sZWFue1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwid2lsbCB0aGUgc3RyaWtlIGxhbmQ/XCIpO1xuICAgICAgICBsZXQgc3VjY2Vzc1JhdGU6IG51bWJlciA9IDAuNDU7XG4gICAgICAgIGlmKGZvb2RXZWFwb24uZm9vZENhdCA9PSBkZWZlbmQud2Vha0FnYWluc3Qpe1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgSSBhbSB3ZWFrIGFnYWluc3Q6ICR7Zm9vZFdlYXBvbi5mb29kQ2F0fWApO1xuICAgICAgICAgICAgc3VjY2Vzc1JhdGUqPTI7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBzdWNjZXNzUmF0ZTogJHtzdWNjZXNzUmF0ZX1gKTsgXG4gICAgICAgIH1cbiAgICAgICAgaWYoZm9vZFdlYXBvbi5mb29kQ2F0ID09IGRlZmVuZC5zdHJvbmdBZ2FpbnN0KXtcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2coYEkgYW0gc3Ryb25nIGFnYWluc3Q6ICR7Zm9vZFdlYXBvbi5mb29kQ2F0fWApO1xuICAgICAgICAgICAgc3VjY2Vzc1JhdGUgLz0yO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgc3VjY2Vzc1JhdGU6ICR7c3VjY2Vzc1JhdGV9YCk7IFxuICAgICAgICB9XG4gICAgICAgIGxldCBoaXRTdWNjZXNzID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgaWYoaGl0U3VjY2Vzcz49c3VjY2Vzc1JhdGUpe1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbmV4cG9ydCBkZWZhdWx0IEFyZW5hOyIsIi8vIFRldmFpbiwgS2V0dWwsIE1pa2VcbmltcG9ydCBEaWdpUGV0IGZyb20gJy4vRGlnaVBldCc7XG5cbi8vRE8gVEhJUzogIGltcG9ydCBBcm1vclxuaW1wb3J0IEFybW9yIGZyb20gJy4vQXJtb3InO1xuXG4vL0RPIFRISVM6ICBpbXBvcnQgT2ZmZW5zaXZlRm9vZFxuaW1wb3J0IE9mZmVuc2l2ZUZvb2QgZnJvbSAnLi9PZmZlbnNpdmVGb29kJztcblxuLy9ETyBUSElTOmNoYW5nZSB0aGUgbmFtZSBvZiB0aGUgZmlnaHRlciB0byBvbmUgb2YgeW91ciBvd24gY2hvb3NpbmcuIE1ha2UgaXQgY29vbFxuXG5jbGFzcyBDYXJsdG9uIGltcGxlbWVudHMgRGlnaVBldCB7XG4gICAgLy9ETyBUSElTOiAgeW91J2xsIG5lZWQgdG8gZGVmaW5lIHRhbU5hbWUsIGhwXG4gICAgdGFtTmFtZTogc3RyaW5nO1xuICAgIGhwOiBudW1iZXI7XG5cbiAgICAvKlxuICAgIERPIFRISVM6IG1ha2UgYXJtb3IgZm9yIHlvdXIgZmlnaHRlci4gIFRoZXkgYXJlIHN0cm9uZyBhZ2FpbnN0IHdoYXQgdGhleSBoYXZlIG1vc3Qgb2YgMyBjYXRlcm9naWVzOlxuICAgICAgICAtZnJ1aXQoc3Ryb25nIGFnYWluc3QgZnJ1aXQsIHdlYWsgYWdhaW5zdCBncmFpbilcbiAgICAgICAgLW1lYXQoc3Ryb25nIGFnYWluc3QgbWVhdCwgd2VhayBhZ2FpbnN0IGZydWl0KVxuICAgICAgICAtZ3JhaW4oc3Ryb25nIGFnYWluc3QgZ3JhaW4sIHdlYWsgYWdhaW5zdCBtZWF0KVxuICAgICovXG4gICAgZGVmZW5zZUNoYXJhY3RlcmlzdGljczogQXJtb3IgPSB7IHN0cm9uZ0FnYWluc3Q6ICdtZWF0Jywgd2Vha0FnYWluc3Q6ICdmcnVpdCcgfTtcblxuICAgIC8vRE8gVEhJUzogIGRlY2xhcmUgYW4gYXJyYXkgY2FsbGVkIGZvb2RzIHRoYXQgaXMgbWFkZSBvZiBPZmZlbnNpdmVGb29kIHdlYXBvbnNcbiAgICBmb29kczogT2ZmZW5zaXZlRm9vZFtdO1xuXG4gICAgLy9ETyBUSElTOiBoYXZlIHlvdXIgY29uc3RydWN0b3IgdGFrZSBpbiB0YW1OYW1lIHdoaWNoIHdpbGwgYmUgeW91ciBmaWdodGVycyBuYW1lIGluIHRoZSByaW5nXG4gICAgY29uc3RydWN0b3IodGFtTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudGFtTmFtZSA9IHRhbU5hbWU7XG4gICAgICAgIHRoaXMuaHAgPSA2MDtcbiAgICAgICAgY29uc29sZS5sb2coYG15IG5hbWUgaXMgJHt0aGlzLnRhbU5hbWV9YCk7XG5cbiAgICAgICAgLy9ETyBUSElTOiAgdXNlICd0aGlzJyBhbmQgZm9vZHMgdG8gbWFrZSBhbiBhcnJheSBvZiBPZmZlbnNpdmVGb29kc1xuICAgICAgICB0aGlzLmZvb2RzID0gW1xuICAgICAgICAgICAgeyBmb29kTmFtZTogJ0JhbmFuYSBCYXpvb2thJywgZm9vZENhdDogJ2ZydWl0JywgZGFtYWdlOiAxMSB9LFxuICAgICAgICAgICAgeyBmb29kTmFtZTogJ0FwcGxlIEFzc2F1bHQgUmlmbGUnLCBmb29kQ2F0OiAnZnJ1aXQnLCBkYW1hZ2U6IDEwIH0sXG4gICAgICAgICAgICB7IGZvb2ROYW1lOiAnU3RyYXdiZXJyeSBTdHVuIEd1bicsIGZvb2RDYXQ6ICdmcnVpdCcsIGRhbWFnZTogOSB9LFxuICAgICAgICAgICAgeyBmb29kTmFtZTogJ01hbmdvIE1vcnRhcicsIGZvb2RDYXQ6ICdmcnVpdCcsIGRhbWFnZTogNiB9LFxuICAgICAgICAgICAgeyBmb29kTmFtZTogJ0dyYXBlIEdhdGxpbmcgR3VuJywgZm9vZENhdDogJ2ZydWl0JywgZGFtYWdlOiA0IH0sXG4gICAgICAgICAgICB7IGZvb2ROYW1lOiAnS2l3aSBLYXRhbmEnLCBmb29kQ2F0OiAnZnJ1aXQnLCBkYW1hZ2U6IDEgfSxcbiAgICAgICAgICAgIHsgZm9vZE5hbWU6ICdCbHVlYmVycnkgQmxvdyBEYXJ0JywgZm9vZENhdDogJ2ZydWl0JywgZGFtYWdlOiAxIH0sXG4gICAgICAgICAgICB7IGZvb2ROYW1lOiAnV2hlYXQgV2hpcCcsIGZvb2RDYXQ6ICdncmFpbicsIGRhbWFnZTogOSB9LFxuICAgICAgICAgICAgeyBmb29kTmFtZTogJ1J5ZSBSb2NrZXQnLCBmb29kQ2F0OiAnZ3JhaW4nLCBkYW1hZ2U6IDYgfSxcbiAgICAgICAgICAgIHsgZm9vZE5hbWU6ICdSaWNlIFJldm9sdmVyJywgZm9vZENhdDogJ2dyYWluJywgZGFtYWdlOiAzIH0sXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgLy9ETyBUSElTOiAgbWFrZSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4geW91ciBmaWdodGVycyBuYW1lXG4gICAgcHVibGljIGdldEZpZ2h0ZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhbU5hbWU7XG4gICAgfVxuXG4gICAgLy9ETyBUSElTOiAgbWFrZSBhIGRlZmVuZCBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0dXJuIHRoZSB1c2VycyBBcm1vclxuICAgIHB1YmxpYyBkZWZlbmQoKTogQXJtb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZlbnNlQ2hhcmFjdGVyaXN0aWNzO1xuICAgIH1cblxuICAgIC8vRE8gVEhJUzogIG1ha2UgYW4gYXR0YWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gYSByYW5kb20gT2ZmZW5zaXZlRm9vZCB3ZWFwb25cbiAgICBwdWJsaWMgYXR0YWNrKCk6IE9mZmVuc2l2ZUZvb2Qge1xuICAgICAgICByZXR1cm4gdGhpcy5mb29kc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmZvb2RzLmxlbmd0aCldO1xuICAgIH1cblxuICAgIC8vRE8gVEhJUzogIG1ha2UgYSB0YWtlRGFtYWdlIGZ1bmN0aW9uIHRoYXQgdGFrZXMgaW4gYSBudW1iZXIgYW5kIHJlZHVjZXMgaHBcbiAgICBwdWJsaWMgdGFrZURhbWFnZShkYW1hZ2U6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmhwIC09IGRhbWFnZTtcbiAgICB9XG5cbiAgICAvL0RPIFRISVM6ICBtYWtlIGEgZ2V0SFAgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHVybiB0aGUgdXNlcnMgY3VycmVudCBocFxuICAgIHB1YmxpYyBnZXRIUCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5ocDtcbiAgICB9XG59XG5cbi8vRE8gVEhJUzogIGNoYW5nZSBGaWdodGVyQSB0byB5b3VyIGZpZ2h0ZXJzIGNvb2wgY2xhc3MgbmFtZVxuZXhwb3J0IGRlZmF1bHQgQ2FybHRvbjsiLCIvLyBSeWFuXG4vLyBDYWxlYlxuLy8gVGFrdXlhXG5pbXBvcnQgRGlnaVBldCBmcm9tICcuL0RpZ2lQZXQnO1xuLy9ETyBUSElTOiAgaW1wb3J0IEFybW9yXG5pbXBvcnQgQXJtb3IgZnJvbSAnLi9Bcm1vcic7XG4vL0RPIFRISVM6ICBpbXBvcnQgT2ZmZW5zaXZlRm9vZFxuaW1wb3J0IE9mZmVuc2l2ZUZvb2QgZnJvbSAnLi9PZmZlbnNpdmVGb29kJztcbi8vRE8gVEhJUzpjaGFuZ2UgdGhlIG5hbWUgb2YgdGhlIGZpZ2h0ZXIgdG8gb25lIG9mIHlvdXIgb3duIGNob29zaW5nLiBNYWtlIGl0IGNvb2xcblxuXG5jbGFzcyBHcmFpbmJveVNsaW0gaW1wbGVtZW50cyBEaWdpUGV0e1xuICAgIC8vRE8gVEhJUzogIHlvdSdsbCBuZWVkIHRvIGRlZmluZSB0YW1OYW1lLCBocFxuICAgIHRhbU5hbWU6c3RyaW5nO1xuICAgIGhwOm51bWJlcjtcbiAgICBcbiAgICAvKlxuICAgIERPIFRISVM6IG1ha2UgYXJtb3IgZm9yIHlvdXIgZmlnaHRlci4gIFRoZXkgYXJlIHN0cm9uZyBhZ2FpbnN0IHdoYXQgdGhleSBoYXZlIG1vc3Qgb2YgMyBjYXRlcm9naWVzOlxuICAgICAgICAtZnJ1aXQoc3Ryb25nIGFnYWluc3QgZnJ1aXQsIHdlYWsgYWdhaW5zdCBncmFpbilcbiAgICAgICAgLW1lYXQoc3Ryb25nIGFnYWluc3QgbWVhdCwgd2VhayBhZ2FpbnN0IGZydWl0KVxuICAgICAgICAtZ3JhaW4oc3Ryb25nIGFnYWluc3QgZ3JhaW4sIHdlYWsgYWdhaW5zdCBtZWF0KVxuICAgICovXG4gICAgZGVmZW5zZUNoYXJhY3RlcmlzdGljczogQXJtb3IgPSB7c3Ryb25nQWdhaW5zdDogJ2ZydWl0Jywgd2Vha0FnYWluc3Q6ICdtZWF0J307XG5cbiAgICAvL0RPIFRISVM6ICBkZWNsYXJlIGFuIGFycmF5IGNhbGxlZCBmb29kcyB0aGF0IGlzIG1hZGUgb2YgT2ZmZW5zaXZlRm9vZCB3ZWFwb25zXG4gICAgZm9vZHM6IE9mZmVuc2l2ZUZvb2RbXTtcblxuICAgIC8vRE8gVEhJUzogaGF2ZSB5b3VyIGNvbnN0cnVjdG9yIHRha2UgaW4gdGFtTmFtZSB3aGljaCB3aWxsIGJlIHlvdXIgZmlnaHRlcnMgbmFtZSBpbiB0aGUgcmluZ1xuICAgIGNvbnN0cnVjdG9yKHRhbU5hbWU6IHN0cmluZyl7XG4gICAgICAgIHRoaXMudGFtTmFtZSA9IHRhbU5hbWU7XG4gICAgICAgIHRoaXMuaHAgPSA2MDtcbiAgICAgICAgY29uc29sZS5sb2coYG15IG5hbWUgaXMgJHt0aGlzLnRhbU5hbWV9YCk7XG5cbiAgICAgICAgLy9ETyBUSElTOiAgdXNlICd0aGlzJyBhbmQgZm9vZHMgdG8gbWFrZSBhbiBhcnJheSBvZiBPZmZlbnNpdmVGb29kc1xuICAgICAgICB0aGlzLmZvb2RzID0gW1xuICAgICAgICAgICAge2Zvb2ROYW1lOiBcIkFnZ3Jlc2l2ZSBXaGVhdFwiLCBmb29kQ2F0OiBcImdyYWluXCIsIGRhbWFnZTogNSB9LFxuICAgICAgICAgICAge2Zvb2ROYW1lOiBcIkFnaXRhdGVkIE5pYmxldHNcIiwgZm9vZENhdDogXCJtZWF0XCIsIGRhbWFnZTogNyB9LFxuICAgICAgICAgICAge2Zvb2ROYW1lOiBcIlVuc2V0dGxlZCBBcHBsZVwiLCBmb29kQ2F0OiBcImZydWl0XCIsIGRhbWFnZTogMyB9LFxuICAgICAgICAgICAge2Zvb2ROYW1lOiBcIkxpdmlkIE9hdG1lYWxcIiwgZm9vZENhdDogXCJncmFpblwiLCBkYW1hZ2U6IDEwIH0sXG4gICAgICAgICAgICB7Zm9vZE5hbWU6IFwiSWxsZWdhbCBCdWNrd2hlYXRcIiwgZm9vZENhdDogXCJncmFpblwiLCBkYW1hZ2U6IDUgfSxcbiAgICAgICAgICAgIHtmb29kTmFtZTogXCJLaWQtRnJpZW5kbHkgSmVya3lcIiwgZm9vZENhdDogXCJtZWF0XCIsIGRhbWFnZTogMSB9LFxuICAgICAgICAgICAge2Zvb2ROYW1lOiBcIlJhY2lhbGx5IEluc2Vuc2l0aXZlIFBhc3RhXCIsIGZvb2RDYXQ6IFwiZ3JhaW5cIiwgZGFtYWdlOiA5IH0sXG4gICAgICAgICAgICB7Zm9vZE5hbWU6IFwiR3JhbmRtYSdzIEJvbG9nbmVzZVwiLCBmb29kQ2F0OiBcIm1lYXRcIiwgZGFtYWdlOiA1IH0sXG4gICAgICAgICAgICB7Zm9vZE5hbWU6IFwiVGhlIENyYWNrZXIgU25hdGNoZXJcIiwgZm9vZENhdDogXCJncmFpblwiLCBkYW1hZ2U6IDEwIH0sXG4gICAgICAgICAgICB7Zm9vZE5hbWU6IFwiQXR0YWNrIENvY29udXRcIiwgZm9vZENhdDogXCJmcnVpdFwiLCBkYW1hZ2U6IDUgfSxcbiAgICAgICAgXVxuXG4gICAgfVxuXG4gICAgLy9ETyBUSElTOiAgbWFrZSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4geW91ciBmaWdodGVycyBuYW1lXG4gICAgcHVibGljIGdldEZpZ2h0ZXJOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhbU5hbWU7XG4gICAgfVxuXG4gICAgLy9ETyBUSElTOiAgbWFrZSBhIGRlZmVuZCBmdW5jdGlvbiB0aGF0IHdpbGwgcmV0dXJuIHRoZSB1c2VycyBBcm1vclxuICAgIHB1YmxpYyBkZWZlbmQoKTogQXJtb3Ige1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZlbnNlQ2hhcmFjdGVyaXN0aWNzO1xuICAgIH1cblxuICAgIC8vRE8gVEhJUzogIG1ha2UgYW4gYXR0YWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCByZXR1cm4gYSByYW5kb20gT2ZmZW5zaXZlRm9vZCB3ZWFwb25cbiAgICBwdWJsaWMgYXR0YWNrKCk6IE9mZmVuc2l2ZUZvb2Qge1xuICAgICAgICBjb25zdCBudW0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmZvb2RzLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0aGlzLmZvb2RzW251bV07XG4gICAgfVxuXG4gICAgLy9ETyBUSElTOiAgbWFrZSBhIHRha2VEYW1hZ2UgZnVuY3Rpb24gdGhhdCB0YWtlcyBpbiBhIG51bWJlciBhbmQgcmVkdWNlcyBocFxuICAgIHRha2VEYW1hZ2UoZGFtYWdlOiBudW1iZXIpOiB2b2lke1xuICAgICAgICB0aGlzLmhwIC09IGRhbWFnZTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInRha2VuIGRhbWFnZVwiKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLmhwKTtcbiAgICB9XG5cbiAgICAvL0RPIFRISVM6ICBtYWtlIGEgZ2V0SFAgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHVybiB0aGUgdXNlcnMgY3VycmVudCBocFxuICAgIHB1YmxpYyBnZXRIUCgpOiBudW1iZXIge1xuICAgICAgIHJldHVybiB0aGlzLmhwOyBcbiAgICB9XG59XG5cbi8vRE8gVEhJUzogIGNoYW5nZSBGaWdodGVyQSB0byB5b3VyIGZpZ2h0ZXJzIGNvb2wgY2xhc3MgbmFtZVxuZXhwb3J0IGRlZmF1bHQgR3JhaW5ib3lTbGltOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iXSwibmFtZXMiOlsiZ3JhaW4iLCJjYXJsIiwiZmlnaHRlcjEiLCJmaWdodGVyMiIsInN0YXJ0aW5nUGxheWVyIiwidGhpcyIsImZpZ2h0ZXJzIiwiY29uc29sZSIsImxvZyIsInRhbU5hbWUiLCJpbml0TWF0Y2giLCJkZXRlcm1pbmVGaXJzdEZpZ2h0ZXIiLCJtZWxlUm91bmQiLCJNYXRoIiwicmFuZG9tIiwicGxheWVyTnVtIiwiY29tYmF0YW50cyIsImRldGVybWluZUNvbWJhdFJvbGVzIiwiYXR0YWNrZXIiLCJkZWZlbmRlciIsImZvb2RXZWFwb24iLCJhdHRhY2siLCJkZWZlbnNlIiwiZGVmZW5kIiwiZGV0ZXJtaW5lU3RyaWtlT3V0Y29tZSIsImdldEZpZ2h0ZXJOYW1lIiwiZm9vZE5hbWUiLCJkYW1hZ2UiLCJ0YWtlRGFtYWdlIiwiZ2V0SFAiLCJuZXh0QXR0YWNrZXIiLCJhY3RpdmVBdHRhY2tlciIsInN1Y2Nlc3NSYXRlIiwiZm9vZENhdCIsIndlYWtBZ2FpbnN0Iiwic3Ryb25nQWdhaW5zdCIsIkFyZW5hIiwiZGVmZW5zZUNoYXJhY3RlcmlzdGljcyIsImhwIiwiZm9vZHMiLCJmbG9vciIsImxlbmd0aCIsIkNhcmx0b24iLCJudW0iLCJHcmFpbmJveVNsaW0iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=